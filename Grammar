grammar = """

program : typedef WS start_fn LPAREN RPAREN LCURLY statements RETURN ZERO RCURLY

RETURN : "return"

ZERO : "0;"

start_fn : "start"

LPAREN : "("
RPAREN : ")"
LCURLY : "{"
RCURLY : "}"
LSQUARE : "["
RSQUARE : "]"


statements : statement (SEMICOLON statements)?
           | statement statements
           |


SEMICOLON : ";"

QUOTATION : "'"

statement : display_statement
          | input_statement
          | if_statement
          | otif_statement
          | otw_statement
          | for_loop
          | while_loop
          | get_out_statement
          | go_on_statement
          | function_definition
          | exception_handling
          | expression
          | modify

modify : push_back | push_front

push_back : word POINT PUSH_BACK LPAREN data_format RPAREN

PUSH_BACK : "push_back"

push_front : word POINT PUSH_FRONT LPAREN data_format RPAREN

PUSH_FRONT : "push_front"

display_statement : "display" LPAREN display_args RPAREN

display_args : expression COMMA display_args
             | expression
             | QUOTATION expression QUOTATION


input_statement : "input" LPAREN expression RPAREN

if_statement : "if" LPAREN expression RPAREN LCURLY statements RCURLY

otif_statement : "otif" LPAREN expression RPAREN LCURLY statements RCURLY

otw_statement : "otw" LCURLY statements RCURLY

for_loop : "for" LPAREN for_args RPAREN LCURLY statements RCURLY

for_args : expression SEMICOLON expression SEMICOLON expression

while_loop : "while" LPAREN expression RPAREN LCURLY statements RCURLY

get_out_statement : "get_out"

go_on_statement : "go_on"

function_definition : typedef word LPAREN function_args RPAREN LCURLY statements RETURN word SEMICOLON RCURLY
                    | typedef word LPAREN RPAREN LCURLY statements RETURN word SEMICOLON RCURLY

function_args : typedef word COMMA function_args
              | typedef word

COMMA : ","

exception_handling : "try" LCURLY statements RCURLY "catch" LPAREN word RPAREN LCURLY statements RCURLY "finally" LCURLY statements RCURLY

expression : number
           | decimal
           | word
           | string
           | bool
           | variable_declaration
           | variable_assignment
           | expression arithmeticoperator expression
           | expression logicaloperator expression
           | LPAREN expression RPAREN
           | function_call
           | for_condition
           | compound_variable_declaration
           | list_slice
           | list_perf

list_perf : word POINT perform

perform : "front" || "back" || "empty"

list_slice : word LSQUARE number COMMA number RSQUARE

compound_variable_declaration : word_dec | list_dec | tuple_dec

word_dec : WORD word EQUALS QUOTATION word QUOTATION

WORD : "word"

tuple_dec : TUPLE word EQUALS LPAREN tuple_arg RPAREN

TUPLE : "tuple"

tuple_arg : tuple_data (COMMA tuple_data)*

tuple_data : string | number | bool | decimal

list_dec : dtype word LSQUARE RSQUARE EQUALS LSQUARE list_arg RSQUARE

dtype : WORD | typedef

list_arg : data_format (COMMA data_format)*

data_format : number | string | bool

for_condition : expression conditionaloperator expression

typedef : "int" | "bool" | "dotie" | "bigint" | "char"

conditionaloperator : "<" | ">" | "<=" | ">=" | "==" | "!="

arithmeticoperator : "+" | "-" | "/" | "*" | "**" | "%"

logicaloperator : "&&" | "||"

variable_declaration : typedef word EQUALS expression

variable_assignment : word EQUALS expression

function_call : word LPAREN function_call_args RPAREN

function_call_args : expression COMMA function_call_args
                    | expression

string : QUOTATION string_cont QUOTATION

string_cont : word (WS word)* (WS number)*

word : identifier

EQUALS : "="

decimal : number POINT number

POINT : "."

identifier : /[a-zA-Z_][a-zA-Z0-9_]*/

number : /[0-9]+/

bool : "True" | "False"

%import common.WS
%ignore WS
"""
