program : typedef start_fn LPAREN RPAREN LCURLY statements RCURLY;

start_fn : start;

LPAREN : '(';
RPAREN : ')';
LCURLY : '{';
RCURLY : '}';

statements : statement SEMICOLON statements
           | statement SEMICOLON?
           | EMPTY;

EMPTY : 

statement : display_statement
          | input_statement
          | if_statement
          | otif_statement
          | otw_statement
          | for_loop
          | while_loop
          | get_out_statement
          | go_on_statement
          | function_definition
          | closure_definition
          | exception_handling
          | expression;

typedef : INT | BOOL | DOTIE | BIGINT | CHAR;

display_statement : DISPLAY LPAREN display_args RPAREN;

DISPLAY : 'display';

display_args : expression COMMA display_args
             | expression
             | QUOTATION expression QUOTATION;

QUOTATION : '"';

COMMA : ',';

input_statement : INPUT LPAREN expression RPAREN;

INPUT : 'input';

if_statement : IF LPAREN expression RPAREN LCURLY statements RCURLY;

otif_statement : OTIF LPAREN expression RPAREN LCURLY statements RCURLY;

otw_statement : OTW LCURLY statements RCURLY;

for_loop : FOR LPAREN for_args RPAREN LCURLY statements RCURLY;

for_args : expression1 SEMICOLON expression2 SEMICOLON expression3;

expression1 : variable_declaration | variable_assignment;

expression2 : variable_assignment;

expression3 : expression ConditionalOperator expression;

while_loop : WHILE LPAREN expression3 RPAREN LCURLY statements RCURLY;

get_out_statement : GET_OUT;

go_on_statement : GO_ON;

function_definition : TYPEDEF WORD LPAREN function_args RPAREN LCURLY statements RCURLY;

function_args : WORD COMMA function_args
              | WORD;

exception_handling : TRY LCURLY statements RCURLY CATCH LPAREN WORD RPAREN LCURLY statements RCURLY FINALLY LCURLY statements RCURLY;

TRY : 'try';
CATCH : 'catch';
FINALLY : 'finally';

expression : number
           | word
           | bool
           | variable_declaration
           | variable_assignment
           | expression arithmetic_operator expression
           | LPAREN expression RPAREN
           | function_call;

arithmetic_operator : ArithmeticOperator;

ArithmeticOperator : '+' | '-' | '/' | '*' | '**' | '%';

ConditionalOperator : '<' | '>' | '<=' | '>=' | '==' | '!=';

LogicalOperator : '&&' | '||';

variable_declaration : typedef word EQUALS expression;

variable_assignment : word EQUALS expression;

function_call : word LPAREN function_call_args RPAREN;

function_call_args : expression COMMA function_call_args
                    | expression;

word : Identifier;

Identifier: [a-zA-Z_][a-zA-Z0-9_]*;

number : [0-9]+;

BOOL : TRUE | FALSE;

TRUE : 'true';
FALSE : 'false';

DOTIE : 'dotie';
