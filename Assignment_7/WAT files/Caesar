
(module
(memory (export "memory") 1)
;; create a array
(func $arr (param $len i32) (result i32)
(local $offset i32)                              ;; offset
(local.set $offset (i32.load (i32.const 0)))     ;; load offset from the first i32

(i32.store (local.get $offset)                   ;; load the length
(local.get $len)
) 

(i32.store (i32.const 0)                         ;; store offset of available space                   
(i32.add 
(i32.add
(local.get $offset)
(i32.mul 
(local.get $len) 
(i32.const 4)
)
)
(i32.const 4)                     ;; the first i32 is the length
)
)
(local.get $offset)                              ;; (return) the beginning offset of the array.
)
;; return the array length
(func $len (param $arr i32) (result i32)
(i32.load (local.get $arr))
)
;; convert an element index to the offset of memory
(func $offset (param $arr i32) (param $i i32) (result i32)
(i32.add
(i32.add (local.get $arr) (i32.const 4))    ;; The first i32 is the array length 
(i32.mul (i32.const 4) (local.get $i))      ;; one i32 is 4 bytes
)
)
;; set a value at the index 
(func $set (param $arr i32) (param $i i32) (param $value i32)
(i32.store 
(call $offset (local.get $arr) (local.get $i)) 
(local.get $value)
) 
)
;; get a value at the index 
(func $get (param $arr i32) (param $i i32) (result i32)
(i32.load 
(call $offset (local.get $arr) (local.get $i)) 
)
)
         (func (export "caesarEncrypt")
 (param $a i32)
 (param $l i32)
 (param $k i32)
 (result i32)
 (local $temp i32)
 (local $temp2 i32)
 (local $i i32)
 i32.const 0
 local.set $i
 (loop $forloop2 (block $breakforloop2
 local.get $i
 local.get $l
 i32.lt_s
 i32.eqz
 br_if $breakforloop2
 local.get $i
 (i32.const 1)
 i32.sub
 local.set $temp
 (call $get (local.get $a) (local.get $temp))
 local.get $k
 i32.sub
 i32.const 26
 i32.add
 i32.const 26
 i32.rem_s
 local.set $temp2
 local.get $i
 i32.const 1
 i32.sub 
 local.set $temp
 (call $set (local.get $a) (local.get $temp) (local.get $temp2))
 local.get $i
 i32.const 1
 i32.add 
 local.set $i
 br $forloop2
 ))
 (i32.const 0)
 return
 )
 (func (export "caesarDecrypt")
 (param $a i32)
 (param $l i32)
 (param $k i32)
 (result i32)
 (local $temp i32)
 (local $temp2 i32)
 (local $i i32)
 i32.const 0
 local.set $i
 (loop $forloop2 (block $breakforloop2
 local.get $i
 local.get $l
 i32.lt_s
 i32.eqz
 br_if $breakforloop2
 local.get $i
 (i32.const 1)
 i32.sub
 local.set $temp
 (call $get (local.get $a) (local.get $temp))
 local.get $k
 i32.sub
 i32.const 26
 i32.add
 i32.const 26
 i32.rem_s
 local.set $temp2
 local.get $i
 i32.const 1
 i32.sub 
 local.set $temp
 (call $set (local.get $a) (local.get $temp) (local.get $temp2))
 local.get $i
 i32.const 1
 i32.add 
 local.set $i
 br $forloop2
 ))
 (i32.const 0)
 return
 )
